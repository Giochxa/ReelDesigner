@model ReelDesigner.Models.ReelModel
@{
    ViewData["Title"] = "Wooden Reel Designer";
    var svgSide = ViewData["SvgSide"] as string;
    var svgFront = ViewData["SvgFront"] as string;
}

<div class="container" style="max-width:1120px">
    <h2 class="mt-3 mb-3">Wooden Reel Designer (2D Views)</h2>

    <form method="post" class="row g-3">
        <div class="col-md-4">
            <label asp-for="FlangeDiameter" class="form-label"></label>
            <input asp-for="FlangeDiameter" class="form-control" />
            <span asp-validation-for="FlangeDiameter" class="text-danger"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="BarrelDiameter" class="form-label"></label>
            <input asp-for="BarrelDiameter" class="form-control" />
            <span asp-validation-for="BarrelDiameter" class="text-danger"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="ArborHoleDiameter" class="form-label"></label>
            <input asp-for="ArborHoleDiameter" class="form-control" />
            <span asp-validation-for="ArborHoleDiameter" class="text-danger"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="Width" class="form-label"></label>
            <input asp-for="Width" class="form-control" />
            <span asp-validation-for="Width" class="text-danger"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="FlangeThickness" class="form-label"></label>
            <input asp-for="FlangeThickness" class="form-control" />
            <span asp-validation-for="FlangeThickness" class="text-danger"></span>
        </div>
        <div class="col-md-4">
            <label asp-for="BarrelThickness" class="form-label"></label>
            <input asp-for="BarrelThickness" class="form-control" />
            <span asp-validation-for="BarrelThickness" class="text-danger"></span>
        </div>

        <div class="col-12 d-flex gap-2 mt-2">
            <button type="submit" class="btn btn-primary">Draw</button>
        </div>
    </form>

    <hr class="my-4" />

    <div class="row">
        <div class="col-md-6 text-center mb-4">
            <h5>Side View</h5>
            <div id="svgHostSide">
                @if (!string.IsNullOrWhiteSpace(svgSide))
                {
                    @Html.Raw(svgSide)
                }
                else
                {
                    <div class="text-muted">Enter your measurements and click <strong>Draw</strong>.</div>
                }
            </div>
            <div class="mt-2">
                <button type="button" class="btn btn-outline-secondary btn-sm" data-target="svgHostSide" data-fmt="svg" disabled>Download SVG</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" data-target="svgHostSide" data-fmt="png" disabled>Download PNG</button>
            </div>
        </div>

        <div class="col-md-6 text-center mb-4">
            <h5>Front View</h5>
            <div id="svgHostFront">
                @if (!string.IsNullOrWhiteSpace(svgFront))
                {
                    @Html.Raw(svgFront)
                }
                else
                {
                    <div class="text-muted">Enter your measurements and click <strong>Draw</strong>.</div>
                }
            </div>
            <div class="mt-2">
                <button type="button" class="btn btn-outline-secondary btn-sm" data-target="svgHostFront" data-fmt="svg" disabled>Download SVG</button>
                <button type="button" class="btn btn-outline-secondary btn-sm" data-target="svgHostFront" data-fmt="png" disabled>Download PNG</button>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>
        (function () {
            function enableButtons(containerId) {
                const host = document.getElementById(containerId);
                const hasSvg = !!host.querySelector('svg');
                document.querySelectorAll(`[data-target='${containerId}']`).forEach(btn => {
                    btn.disabled = !hasSvg;
                });
            }

            function getCurrentSvg(containerId) {
                const host = document.getElementById(containerId);
                const svg = host.querySelector('svg');
                return svg ? svg.outerHTML : null;
            }

            function download(filename, content, type) {
                const blob = new Blob([content], { type });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = filename;
                document.body.appendChild(a);
                a.click();
                a.remove();
                URL.revokeObjectURL(url);
            }

            document.querySelectorAll("button[data-target]").forEach(btn => {
                btn.addEventListener("click", () => {
                    const target = btn.dataset.target;
                    const fmt = btn.dataset.fmt;
                    const svg = getCurrentSvg(target);
                    if (!svg) return;

                    if (fmt === "svg") {
                        download(`${target}.svg`, svg, "image/svg+xml");
                    } else if (fmt === "png") {
                        const img = new Image();
                        const svgBlob = new Blob([svg], { type: "image/svg+xml" });
                        const url = URL.createObjectURL(svgBlob);

                        img.onload = function () {
                            const w = img.width || 400;
                            const h = img.height || 400;
                            const canvas = document.createElement("canvas");
                            canvas.width = w;
                            canvas.height = h;
                            const ctx = canvas.getContext("2d");
                            ctx.fillStyle = "#ffffff";
                            ctx.fillRect(0, 0, w, h);
                            ctx.drawImage(img, 0, 0);
                            URL.revokeObjectURL(url);

                            canvas.toBlob(blob => {
                                const url2 = URL.createObjectURL(blob);
                                const a = document.createElement("a");
                                a.href = url2;
                                a.download = `${target}.png`;
                                document.body.appendChild(a);
                                a.click();
                                a.remove();
                                URL.revokeObjectURL(url2);
                            }, "image/png");
                        };
                        img.src = url;
                    }
                });
            });

            // init button states
            enableButtons("svgHostSide");
            enableButtons("svgHostFront");
        })();
    </script>
    <style>
        .container { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; }
        #svgHostSide svg, #svgHostFront svg {
            max-width: 100%;
    height: auto;
    min-height: 500px;   /* force enough vertical space */
    border: 1px solid #eee;
    border-radius: 8px;
        }
        .form-label { font-weight: 600; }
    </style>
}
